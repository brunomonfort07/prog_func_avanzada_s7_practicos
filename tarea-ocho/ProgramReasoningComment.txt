-- Denise Souberville 223427
-- Bruno Monfort 173280
-- Nicolás Capellino 272778

Apuntes del libro - BORRAR PARA LA ENTREGA:
  - Inducción en números (data Nat = Zero | Succ Nat)
    - Caso base: p se cumple para Zero
    - Caso inductivo: p se conserva para Succ. p es válido para cualquier natural n
  - Inducción en listas
    - Caso base: p es válido para la lista vacía []
    - Caso inductivo: si p es válido para cualquier lista xs, entonces también es válido para x:xs para cualquier elemento x
    - Listas cumplen:
        - Distributiva
            Sean xs e ys :: [x]
            reverse (xs ++ ys) = reverse ys ++ reverse xs
        - Singleton Lists
            reverse [x] = [x]
        - Truco: Identidad
            reverse ys = reverse ys ++ []
        - Asociatividad cno
            (reverse ys ++ reverse xs) ++ [x] = reverse ys ++ (reverse xs ++ [x])
    - Aumentar eficiencia sin ++
        - Truco: Redefinir métodos usando una lista vacía que es la identidad de "append".
        - Ejemplo 1:
            reverse :: [a] -> [a]
            reverse []     = []
            reverse (x:xs) = reverse xs ++ [x]
            <<Se transforma en:>>
            reverse’ :: [a] -> [a] -> [a]
            reverse’ [] ys = ys
            reverse’ (x:xs) ys = reverse’ xs (x:ys)
            reverse :: [a] -> [a]
            reverse xs = reverse’ xs []
        - Ejemplo 2:
            data Tree= Leaf Int | Node Tree Tree
            flatten :: Tree -> [Int]
            flatten (Leaf n) = [n]
            flatten (Node l r) = flatten l ++ flatten r
            <<Se transforma en:>>
           flatten’ :: Tree -> [Int] -> [Int]
           flatten’ (Leaf n) ns = n:ns
           flatten’ (Node l r) ns = flatten’ l (flatten’ r ns)
           flatten :: Tree -> [Int]
           flatten t = flatten’ t []
    - Correctitud del compiler (Le entendí al profe que no iba)


Ejercicios:

1. Show that add n (Succ m) = Succ (add n m), by induction on n.

    Definiciones previas:

    data Nat = Zero | Succ Nat

    add :: Nat -> Nat -> Nat
    add Zero     m = m
    add (Succ n) m = Succ (add n m)

    Demostración:
        -- Caso base n = Zero --

            Lado izquierdo:
            add Zero (Succ m) = Succ m              -- Por definición de add

            Lado derecho:
            Succ (add Zero m) = Succ m              -- Por definición de add

            Queda demostrado.

        -- Caso inductivo --
            -- Hipótesis de inducción ("Si p es válido para n"):
                add n (Succ m) = Succ (add n m)

            -- Debemos probar que p es válido también para Succ n:
                add (Succ n) (Succ m) = Succ (add (Succ n) m)

            -- Lado izquierdo:
            add (Succ n) (Succ m) = 
            = {  aplicar definición de 'add'  -> add (Succ n) m = Succ (add n m) }
              Succ (add n (Succ m))
            = {  aplicar hipótesis  -> add n (Succ m) = Succ (add n m) }
              Succ (Succ (add n m))
            = {  por definición de 'add'  -> add (Succ n) m = Succ (add n m) }
              Succ (add (Succ n) m)

            Queda demostrado.

2. Using this property, together with add n Zero = n, show that addition is commutative, add n m = add m n, by induction on n.

    Definiciones previas:
        Prop 1: 
            add n (Succ m) = Succ (add n m)
        Prop 2:
            add n Zero = n

    Demostración:
        -- Caso base n = Zero --    
            -- add Zero m = add m Zero  
            
            add Zero m
            = {  aplicar definición de 'add'  -> add Zero m = m }
              m
            = {  por definicion Prop 2  -> add n Zero = n }
              add m Zero
            
            Queda demostrado.
            
        -- Caso inductivo --
            -- Hipótesis de inducción ("Si p es válido para n"):
                add n m = add m n

            -- Debemos probar que p es válido también para Succ n:
                add (Succ n) m = add m (Succ n)
            
            -- Lado izquierdo:
            add (Succ n) m
            = {  aplicar definición de 'add'  -> add (Succ n) m = Succ (add n m) }
              Succ (add n m)
            = {  aplicar hipótesis  ->  add n m = add m n }
              Succ (add m n)
            = {  por definicion de Prop 1 :  add n (Succ m) = Succ (add n m)  }
              add m (Succ n)
              
            Queda demostrado.